data = [
    73.53,
    3.19,
    1.81,
    1.98,
    1.95,
    1.84,
    5.67,
    1.8,
    1.73,
    2.37,
    2.1,
    2.15,
    1.16,
    1.55,
    2.25,
    1.6,
    1.4,
    1.76,
    1.21,
    8.76,
    2.74,
    1.04,
    7.09,
    1.74,
    124.2,
    1.92,
    1.18,
    1.62,
    1.27,
    1,
    1.11,
    1.04,
    1.13,
    1.92,
    1.17,
    1.08,
    1.1,
    1.03,
    1.44,
    1.5,
    1.46,
    1.31,
    1.57,
    1.75,
    1.09,
    6.72,
    3.81,
    4.28,
    1.3,
    2.56,
    11.7,
    1.59,
    55.08,
    4.17,
    2.56,
    1.06,
    2.22,
    6.52,
    3.01,
    27.83,
    1.25,
    5.03,
    1.22,
    2.71,
    1.34,
    2.02,
    1.51,
    1.61,
    1.3,
    1.16,
    1.26,
    1.36,
    1.33,
    1.01,
    1.16,
    1.9,
    1.33,
    1.37,
    5.69,
    2,
    17.74,
    3.23,
    1.01,
    2.6,
    5.29,
    16.87,
    1.07,
    1.02,
    1.11,
    2.18,
    1.08,
    1.61,
    2.68,
    1.51,
    1.58,
    1.09,
    1.29,
    1.28,
    2.71,
    3.16,
    4.55,
    2.73,
    3.34,
    4.68,
    1.96,
    1.74,
    1.33,
    10.34,
    2.3,
    7.81,
    1.31,
    1.1,
    24.6,
    1.26,
    1.2,
    1.27,
    1.21,
    1.79,
    1.34,
    3.6,
    13.91,
    29.39,
    1.75,
    1.01,
    1.44,
    2.56,
    2.76,
    1.32,
    1.06,
    21.22,
    1.48,
    3.32,
    1,
    6.58,
    1,
    12.76,
    1.54,
    1.3,
    7.39,
    3.49,
    1.63,
    1.06,
    1.27,
    1.28,
    7.63,
    4.9,
    3.99,
    1.32,
    2.58,
    3.19,
    1.17,
    1.57,
    1.75,
    1.59,
    5.7,
    584.67,
    2.11,
    3.4,
    5.66,
    1,
    3.13,
    1.61,
    2.64,
    1.06,
    1.33,
    2.56,
    2.26,
    5.42,
    1.09,
    6.19,
    14.78,
    1,
    31.8,
    1.14,
    1,
    220.59,
    1.47,
    1.08,
    1.21,
    3.68,
    1.48,
    15.39,
    1.06,
    5.53,
    5.2,
    4.68,
    3.16,
    4.06,
    5.93,
    2.05,
    1.61,
    1.71,
    3.07,
    1.03,
    2.22,
    1,
    5.63,
    3.69,
    1.15,
    1.18,
    40.27,
    2.11,
    1.17,
    30.86,
    1.72,
    1,
    1.81,
    1.67,
    1.08,
    1.51,
    1.87,
    1.47,
    1.23,
    1.01,
    1.43,
    1.26,
    1.68,
    2.14,
    1.51,
    1.59,
    1.68,
    1.73,
    1,
    1.05,
    2.4,
    2.83,
    2.05,
    1.01,
    7.66,
    1.62,
    13.93,
    1,
    5.17,
    1.21,
    1.73,
    1.22,
    3.32,
    2.25,
    1.6,
    1.68,
    15.86,
    8.43,
    1,
    1.2,
    1.16,
    1.09,
    9.46,
    1,
    1.35,
    15.41,
    1.34,
    48.19,
    6.16,
    15.73,
    2.55,
    1.16,
    1.31,
    3.21,
    4.5,
    1.37,
    2.68,
    1.02,
    17.9,
    12.83,
    3.27,
    3.12,
    1.74,
    1.17,
    28.43,
    1.17,
    1.89,
    1.2,
    1.01,
    8.37,
    1.09,
    1.13,
    1.22,
    2.08,
    2,
    2.33,
    5667.82,
    3.22,
    2.1,
    1,
    5.1,
    1.61,
    2.73,
    1.39,
    1.4,
    1.37,
    5.05,
    1.27,
    2.03,
    1.39,
    3.37,
    1.02,
    40.93,
    1.58,
    1.95,
    1.91,
    1.35,
    1.33,
    1.9,
    3.64,
    1.58,
    1,
    1.56,
    27.95,
    1.03,
    57.84,
    2.25,
    1.61,
    3.52,
    1.85,
    21.45,
    1.29,
    1,
    1.9,
    2.22,
    15.78,
    6.22,
    8.25,
    6.91,
    8,
    4.7,
    1.24,
    1.15,
    2.55,
    1,
    4.77,
    6.41,
    1.1,
    1.08,
    1,
    54.41,
    39.96,
    2.22,
    1.19,
    1.96,
    1.17,
    4.88,
    1.47,
    8.49,
    1,
    1.61,
    1.92,
    1,
    15.19,
    1.99,
    1.04,
    1.88,
    1.19,
    1.82,
    3.89,
    1.39,
    8.19,
    3.73,
    1.8,
    14.4,
    2.18,
    3.16,
    5.13,
    3.91,
    1,
    1.26,
    1.5,
    1.08,
    4.18,
    1.26,
    1.02,
    4.87,
    3.36,
    1.02,
    1.79,
    1,
    2.02,
    5.65,
    2.02,
    3.05,
    2.04,
    1,
    1.01,
    1.1,
    4.47,
    1.24,
    1.24,
    1.05,
    3.13,
    2.9,
    1.62,
    7.37,
    1.53,
    1.92,
    3.56,
    1.7,
    2.38,
    1.26,
    3.39,
    8.74,
    1.25,
    1.77,
    3.23,
    1.65,
    4.52,
    1.34,
    3.09,
    1.04,
    3.83,
    1.05,
    2.61,
    9.08,
    5.05,
    2.54,
    6.81,
    1.72,
    10.39,
    1.06,
    1,
    5.46,
    1.26,
    1.4,
    10.11,
    1.25,
    1.96,
    2.68,
    4.72,
    3.11,
    1.09,
    9.34,
    1.08,
    1.62,
    1.26,
    1,
    1.12,
    1.85,
    2.41,
    1.43,
    1.8,
    1.44,
    1.27,
    1.13,
    1.7,
    20.77,
    1.82,
    3,
    1.04,
    6.92,
    14.07,
    2.06,
    1.13,
    8.64,
    1.89,
    7.13,
    1.42,
    1.34,
    9.95,
    1.03,
    8.41,
    10.17,
    1.1,
    1.04,
    3.17,
    1.44,
    1.49,
    3.22,
    2.36,
    2.76,
    1.94,
    70.04,
    6.5,
    1.68,
    1.79,
    2.06,
    2.6,
    12.16,
    2.35,
    2.27,
    65.41,
    1.28,
    16.08,
    3.25,
    3.51,
    1.96,
    1.16,
    2.16,
    1.1,
    7.65,
    1,
    1.66,
    2.79,
    1.21,
    1.37,
    83.32,
    2.05,
    394.82,
    1.39,
    8.06,
    1.01,
    1.19,
    3.15,
    5.78,
    2.05,
    1.76,
    2.66,
    1.23,
    1,
    2.12,
    1.21,
    3.11,
    36.07,
    1.75,
    15.15,
    1.52,
    1.21,
    2,
    1.37,
    1.45,
    1.33,
    6.26,
    1.36,
    1.24,
    1.87,
    2.73,
    4.84,
    5.96,
    9.32,
    1.13,
    44.25,
    2.09,
    1.22,
    19.69,
    2.84,
    24.44,
    1.16,
    1,
    7.62,
    1.71,
    1.35,
    1.99,
    12.47,
    1.17,
    1.54,
    1.04,
    1.12,
    1.04,
    3.93,
    9.3,
    1.29,
    1.05,
    1.34,
    2.57,
    1.42,
    2.36,
    3.38,
    5.01,
    5.25,
    1.08,
    1.83,
    3.22,
    1.66,
    1.7,
    1.17,
    1.69,
    1.87,
    6.77,
    1,
    6.01,
    4.26,
    1.02,
    163.68,
    37.07,
    7.14,
    2.85,
    5.63,
    8.39,
    1.78,
    12.89,
    4.03,
    1.51,
    1,
    1.53,
    1.4,
    1.84,
    2.26,
    1.3,
    1,
    1,
    2.13,
    1.41,
    1.28,
    1.06,
    2.91,
    1.65,
    3.11,
    1.43,
    4.05,
    14.59,
    1.22,
    11.54,
    1.62,
    1.16,
    5.17,
    2.11,
    3.77,
    31.8,
    6.9,
    8.76,
    3.91,
    1.85,
    1.73,
    1.07,
    1.18,
    8.81,
    3.96,
    1.52,
    1.24,
    1.07,
    1,
    2.93,
    1.19,
    1.07,
    1.03,
    1.04,
    11.73,
    4.28,
    7.03,
    29.28,
    1.85,
    1.24,
    1.36,
    1,
    1.56,
    1.13,
    3.59,
    2.12,
    1.42,
    1.02,
    1.05,
    4.05,
    1.25,
    2.58,
    1,
    3.4,
    1,
    3.83,
    2.49,
    1.53,
    1,
    1.47,
    1.87,
    1.31,
    1.75,
    7.02,
    1.83,
    1.77,
    839.98,
    1.56,
    1.23,
    3.16,
    1.46,
    3.09,
    1.25,
    1.29,
    2.42,
    3.25,
    1.97,
    2.18,
    6.82,
    9.89,
    1.16,
    35.72,
    4.21,
    1.16,
    2.39,
    2.92,
    1.41,
    1.39,
    1.47,
    3.04,
    1.69,
    1,
    2.34,
    1.14,
    2.31,
    1.35,
    1,
    1.06,
    3.91,
    7.35,
    1.08,
    1.44,
    2.65,
    1.01,
    2.3,
    1.48,
    1.63,
    3.47,
    1.06,
    1,
    1,
    1.33,
    23.16,
    1.06,
    3.63,
    1.18,
    2.43,
    1.16,
    1.63,
    32.77,
    1,
    11.98,
    4.91,
    1.44,
    7.84,
    7.48,
    1.19,
    1.08,
    1.13,
    1.4,
    2.65,
    13.17,
    6,
    1,
    3.99,
    1.38,
    3,
    1.41,
    3.22,
    4.55,
    4.17,
    5.5,
    1.06,
    10.52,
    2.88,
    4.27,
    1.72,
    1,
    1.02,
    2.81,
    1.33,
    1.1,
    4.02,
    2,
    1.47,
    6.64,
    3.21,
    2.32,
    5.22,
    1.01,
    1.37,
    18.1,
    3.23,
    1.33,
    74.55,
    5.28,
    4.25,
    14.4,
    5.89,
    2.32,
    3.04,
    2.27,
    1.49,
    5.72,
    11.07,
    1.87,
    5.39,
    1.67,
    1.63,
    12.85,
    3.19,
    2.57,
    2.44,
    1.35,
    7.49,
    2.94,
    1.27,
    2.48,
    3.25,
    1.35,
    1.2,
    1.51,
    1.84,
    1.06,
    1,
    2.7,
    1.08,
    6.9,
    1.24,
    2,
    1.19,
    1,
    9.52,
    1.17,
    1.29,
    1.02,
    3.52,
    848.78,
    3.34,
    1.21,
    3.34,
    1.01,
    36.5,
    1.16,
    1.12,
    2.03,
    3.23,
    1.86,
    1,
    1.47,
    1.18,
    13.54,
    31.91,
    3.27,
    2.41,
    1,
    20.77,
    1.21,
    1.42,
    1.65,
    1,
    4.03,
    4.31,
    3.7,
    3.4,
    2.49,
    1,
    60.67,
    1.72,
    5.79,
    1.42,
    1,
    1.78,
    3.67,
    1.02,
    1.82,
    2.25,
    1.09,
    5.87,
    1.18,
    1,
    7.5,
    1.07,
    6.31,
    1.48,
    1.83,
    2.12,
    4.76,
    1.31,
    4.02,
    2.28,
    1.01,
    3.76,
    1.63,
    1.4,
    17.34,
    1.33,
    1.14,
    1.06,
    1.4,
    3.33,
    1.65,
    1.69,
    1.98,
    2.75,
    1.02,
    1.18,
    1.78
]

let testResult = {
	'betPrice':10,
	'balance':0,
	'testGameCount':0,
	'testGamewinn':0,
	'testGamefaild':0
}

let globalList = []

let patternRange = 4 //defualt pattern range 

function roundFractionNumber(n){

    let string_n = n.toString()
    let string_split_by_dote = string_n.split('.')
        string_split_by_dote = string_split_by_dote[1]
    //console.log(`string_split_by_dote ${string_split_by_dote}`)

     if(string_split_by_dote == undefined)
        return n 
    
    
    let fraction1 = string_split_by_dote.length > 0 ? string_split_by_dote : '0'
        
    return  parseFloat(parseInt(n) + '.' +fraction1 + '0')
}

function winnpattern(){
	let count = 0
	let pattern = []
	
	for(let x=0; x<globalList.length; x++){
		if(globalList[x] > 1.99){
			count += 1
		}else{
			if(count > 0){
				pattern.push(count)
			}
			count = 0
		}
	}
	
	return pattern
}

function faildpattern(){
	let count = 0
	let pattern = []
	
	for(let x=0; x<globalList.length; x++){
		if(globalList[x] < 2){
			count += 1
		}else{
			if(count > 0){
				pattern.push(count)
			}
			count = 0
		}
	}
	
	return pattern
}

function manageBlance(gameResultOdd){
	testResult.testGameCount += 1
	
	if(gameResultOdd < 2){
		testResult.testGamefaild += 1
		testResult.balance -= testResult.betPrice
	}else if(gameResultOdd > 1.99){
		testResult.testGamewinn += 1
		testResult.balance += testResult.betPrice
	}
}

for(let x=data.length-1; x>=0; x--){
	
	//update global list 
	if(globalList.length < 1)
		globalList.push(data[x])
	else{
		let newList = []
		newList.push(data[x]) //add the current result to new list
		newList.push(...globalList) //add global list to new list
		globalList = newList //swap to globalList
	}
	

	
	let winnp 	= winnpattern()
	let faildp  = faildpattern()
	
	if(winnp.length >= patternRange  & faildp.length >= patternRange){
	
		last13resultWinn = winnp.slice(0, patternRange)
		last13resultFaild = faildp.slice(0, patternRange)
		
		
		
		//console.log(`last13resultWinn : ${last13resultWinn}`)
		console.log(patternRange, (patternRange*2))
	
		if(globalList[0] < 2 & faildp.slice(0,patternRange).reverse().toString() == faildp.slice(patternRange, patternRange*2).toString()){
			manageBlance(data[x-1])
			
			console.log(`Test Game    : faildp = ${faildp.slice(0,patternRange).reverse().toString()} == ${faildp.slice(patternRange, patternRange*2).toString()}`)
			
			if(data[x-1] > 2){
				console.log(`%cResult Go To : ${data[x-1]}`, 'color:green')
			}else{
				console.log(`%cResult Go To : ${data[x-1]}`, 'color:red')
			}
		}
		
		if(globalList[0] > 2 & winnp.slice(0,patternRange).reverse().toString() == winnp.slice(patternRange, patternRange*2).toString()){
			console.log(`globalList : ${globalList.slice(0, patternRange*2)}`)
			manageBlance(data[x-1])
			
			console.log(`Test Game    : winnp = ${winnp.slice(0,patternRange).toString()} == ${winnp.slice(patternRange, patternRange*2).toString()}`)
			
			if(data[x-1] > 2){
				console.log(`%cResult Go To : ${data[x-1]}`, 'color:green')
			}else{
				console.log(`%cResult Go To : ${data[x-1]}`, 'color:red')
			}
		}
		
		if(faildp.slice(0, patternRange).toString() != [1,1,1,1])
		if(globalList[0] < 2 & faildp.slice(0,patternRange).reverse().toString() == winnp.slice(patternRange, patternRange*2).toString()){
			console.log(`globalList : ${globalList.slice(0, patternRange*2)}`)
			manageBlance(data[x-1])
			
			console.log(`Test Game    : faildp=winnp = ${faildp.slice(0,patternRange).toString()} == ${winnp.slice(patternRange, patternRange*2).toString()}`)
			
			if(data[x-1] > 2){
				console.log(`%cResult Go To : ${data[x-1]}`, 'color:green')
			}else{
				console.log(`%cResult Go To : ${data[x-1]}`, 'color:red')
			}
		}
		
		
	
	}
	
}

console.log(`Final Result : `, testResult )
