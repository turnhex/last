data = [
    1.11,
    1.1,
    1.08,
    3.72,
    1.13,
    5.23,
    42.73,
    1,
    6.45,
    2.25,
    1.8,
    8.93,
    2.19,
    2.93,
    3.11,
    3.79,
    1.77,
    1.47,
    1.51,
    7.28,
    1.38,
    1.89,
    1.42,
    2.4,
    1.56,
    1,
    5.92,
    5.74,
    2.23,
    1.6,
    1.08,
    5.23,
    1.02,
    1.93,
    2.11,
    4.08,
    71.09,
    2.96,
    4.49,
    1.26,
    1.02,
    1.59,
    1.18,
    6.83,
    1.01,
    1.03,
    5.81,
    1.76,
    2.8,
    5.74,
    1.63,
    3.16,
    9.33,
    1.06,
    1.37,
    1.43,
    1.73,
    1.23,
    1.54,
    13.03,
    1.44,
    1.43,
    21.47,
    1.86,
    3.52,
    1,
    413.12,
    1.02,
    4.84,
    1.52,
    1.22,
    2.89,
    2.28,
    1,
    1.72,
    8.17,
    1.36,
    1.01,
    7.14,
    1,
    3.03,
    5.76,
    1.73,
    3.32,
    94.45,
    1.77,
    2.8,
    2.23,
    1.05,
    2.68,
    1.46,
    1.68,
    1.18,
    6.66,
    1.41,
    4.04,
    2.19,
    2.32,
    528.84,
    1.49,
    1.56,
    1.97,
    1.81,
    4.96,
    1.14,
    1.14,
    3.18,
    1.49,
    2.18,
    2.4,
    2.08,
    1.31,
    1.62,
    1.3,
    1.21,
    3.27,
    3.65,
    1.8,
    2.27,
    1.09,
    1.67,
    9.25,
    6.93,
    2.53,
    1.17,
    2.4,
    1.81,
    1.09,
    2.52,
    6.14,
    1.6,
    1.15,
    1.39,
    2.13,
    1.12,
    2.33,
    2.13,
    2.77,
    1.2,
    1.89,
    1.32,
    1.58,
    2.37,
    6.58,
    1.7,
    5.16,
    3.42,
    1.95,
    1.94,
    1.11,
    1.09,
    2.12,
    5.64,
    1.64,
    2.07,
    2.79,
    1.56,
    1.16,
    1.53,
    1,
    1.35,
    4.7,
    2.49,
    11.47,
    2.23,
    3.28,
    1,
    37.02,
    1.98,
    2.01,
    1.12,
    4.34,
    5.22,
    9.61,
    2.44,
    1.71,
    1.44,
    1.46,
    1,
    1.8,
    1.99,
    1.3,
    2.6,
    1.39,
    1.3,
    1.09,
    1.02,
    1.74,
    3.1,
    2.17,
    14.24,
    1.19,
    1.42,
    29.74,
    1.56,
    1.84,
    1.32,
    1,
    6.09,
    5.45,
    4.83,
    2.3,
    3.2,
    1.06,
    5.52,
    2.28,
    5.81,
    65,
    1,
    5.53,
    60.07,
    1.76,
    1.29,
    3.28,
    1.24,
    1.42,
    2.18,
    1,
    2.96,
    2.68,
    1.48,
    1.37,
    1.61,
    9.44,
    3.75,
    2.29,
    1.51,
    4.02,
    4.85,
    4.25,
    3.49,
    1,
    7.06,
    2.04,
    1.45,
    1.08,
    3.03,
    1.29,
    1.23,
    1.38,
    1.55,
    1.2,
    10.88,
    1.68,
    1.8,
    25.06,
    1.5,
    3.65,
    1.45,
    2.54,
    1.14,
    4.4,
    1.15,
    1.65,
    1.35,
    2.78,
    6.7,
    1.11,
    1.04,
    1,
    15.56,
    8.88,
    1.55,
    1.45,
    1,
    4.33,
    1.46,
    1.18,
    1.36,
    1.34,
    2.77,
    7.95,
    1.04,
    1.46,
    30.3,
    1.9,
    1.05,
    2.32,
    2.36,
    2.2,
    2.61,
    1.74,
    1.03,
    12.15,
    3.24,
    1.03,
    1.78,
    4.77,
    4.13,
    5.16,
    1,
    25.72,
    6.01,
    1.2,
    1.87,
    1,
    1.79,
    1,
    1.69,
    1.56,
    5.73,
    1.16,
    49.45,
    2.53,
    9.94,
    3.03,
    1.02,
    1.23,
    2.93,
    3.91,
    1.1,
    1.5,
    56.63,
    7.51,
    1.34,
    51.48,
    1.31,
    1.27,
    2.2,
    1.46,
    1.46,
    2.54,
    1.06,
    1.63,
    1.19,
    1.47,
    4.1,
    16.08,
    1.35,
    15.16,
    6.17,
    1,
    1.03,
    1,
    3.18,
    2.29,
    1,
    3.1,
    1,
    1.27,
    2.27,
    4.58,
    1.42,
    2.66,
    1.04,
    1.3,
    4.64,
    2.4,
    2.32,
    1.63,
    2.33,
    2.93,
    3.61,
    1.07,
    4.65,
    2.96,
    1.64,
    31.75,
    19.58,
    4.97,
    3.74,
    2.57,
    1.08,
    1.19,
    5.01,
    1.42,
    1.31,
    16.26,
    1.05,
    1.35,
    2.68,
    1.87,
    1.96,
    1.14,
    1.08,
    1.03,
    1.39,
    2.66,
    1.38,
    5.08,
    1.03,
    1.04,
    1.24,
    1.35,
    1.65,
    2.46,
    1,
    1,
    1.04,
    4.7,
    1.49,
    3.05,
    6.28,
    3.8,
    1.32,
    2.01,
    1.9,
    3.38,
    1.09,
    1.24,
    6.57,
    1.09,
    1.56,
    3.19,
    4.28,
    29.75,
    7.29,
    2.15,
    4.88,
    5.06,
    1.92,
    1.18,
    2.05,
    1.07,
    1.06,
    1.02,
    6.06,
    2.28,
    1.13,
    1.67,
    3.47,
    1.46,
    2.41,
    1.02,
    2.07,
    1.06,
    7.42,
    1.14,
    1.55,
    1.22,
    6.83,
    1.28,
    1.28,
    1.14,
    62.97,
    1.66,
    1.13,
    2.84,
    3.76,
    2.09,
    3.39,
    1,
    1.72,
    3.81,
    1.33,
    3.34,
    1.83,
    2.37,
    2.78,
    1,
    1,
    1.18,
    1.69,
    1,
    2.03,
    8.6,
    1,
    5.61,
    1.55,
    1.3,
    12.5,
    3.78,
    3.26,
    1.03,
    1.55,
    1.21,
    2.57,
    7.2,
    1.88,
    5.45,
    28.65,
    1.24,
    1.55,
    1.19,
    2.4,
    1.38,
    10.51,
    1.44,
    2.38,
    1,
    2.25,
    1.15,
    1.13,
    1.89,
    1.05,
    1,
    1.38,
    3.5,
    2.23,
    2.41,
    1.94,
    2.55,
    2.52,
    1,
    2.56,
    1.1,
    30.44,
    1.69,
    11.07,
    1.02,
    2.27,
    1.32,
    1.42,
    2.54,
    2.45,
    1.08,
    4.16,
    4.11,
    1.02,
    1.23,
    1.75,
    6.56,
    1.16,
    1.1,
    1.47,
    1,
    1,
    250.15,
    6.2,
    2.01,
    2.75,
    2.01,
    1.2,
    253.75,
    2.7,
    1.05,
    15.07,
    1.95,
    1.1,
    3.74,
    3.41,
    1.41,
    1.14,
    2.02,
    4.22,
    1.05,
    3.6,
    5.02,
    1,
    1,
    2,
    7.69,
    18.66,
    1.93,
    1.19,
    1.5,
    2.1,
    1.05,
    1.07,
    32.18,
    4.87,
    1.82,
    1.54,
    21.92,
    16.17,
    2.57,
    7.56,
    21.91,
    6.96,
    1.34,
    2.32,
    1.29,
    4.44,
    1.16,
    1.61,
    5.17,
    6.86,
    3.26,
    1.37,
    1.77,
    1.57,
    2.03,
    1.52,
    1.58,
    5.45,
    1.48,
    1.4,
    1.2,
    18.23,
    1.31,
    1.04,
    2.09,
    1.33,
    18.36,
    1.74,
    7.36,
    7.91,
    1.37,
    3.34,
    1.75,
    7.13,
    1.96,
    123.46,
    1.04,
    1.15,
    1.49,
    1.31,
    1.2,
    2.08,
    3.34,
    1.61,
    5.72,
    1.28,
    1.41,
    1.95,
    1.23,
    2.04,
    10.52,
    1.29,
    1.71,
    1.56,
    1.31,
    2.11,
    3.97,
    1.98,
    3.41,
    1.21,
    6.31,
    6.42,
    1.67,
    3.23,
    2,
    1.84,
    1.13,
    8.55,
    1.05,
    1.81,
    1.24,
    1.63,
    1.27,
    21,
    1.09,
    1.68,
    1.5,
    2.25,
    8.3,
    1.93,
    1.75,
    1.2,
    1.19,
    1.74,
    6.09,
    2.13,
    1.33,
    16.22,
    3.43,
    4.26,
    1.92,
    1.18,
    1.06,
    18.98,
    4.61,
    3.39,
    2.11,
    2.06,
    3.44,
    2.69,
    1.24,
    3.17,
    1,
    1.42,
    1.07,
    1.23,
    3.2,
    21.84,
    2.31,
    1.62,
    1.56,
    1.17,
    1.51,
    1,
    2.93,
    1.43,
    2.45,
    4.99,
    2.39,
    1.1,
    1.12,
    1.09,
    2.1,
    1.86,
    3,
    1.7,
    2.92,
    1.33,
    1.21,
    3.69,
    1.73,
    1.13,
    1.05,
    1.6,
    1.81,
    1.62,
    1.61,
    1.11,
    20.88,
    1.24,
    1.88,
    3.05,
    1.43,
    1.65,
    1.68,
    10.57,
    8.68,
    1.57,
    6.8,
    2.08,
    7.3,
    1.02,
    2.72,
    1.44,
    2.44,
    3.8,
    3.03,
    1.83,
    1.16,
    57.05,
    5.45,
    75.1,
    15.44,
    1.22,
    7.6,
    1.12,
    2.27,
    3.55,
    1.77,
    1.44,
    11.77,
    4.53,
    7.74,
    3.8,
    1.03,
    166.71,
    7.19,
    5.59,
    2.98,
    1.5,
    2.18,
    4.71,
    1.19,
    1.37,
    1.37,
    1.92,
    1,
    1.24,
    1,
    3.72,
    1,
    1.75,
    3.39,
    1.62,
    2.45,
    4.14,
    1.3,
    1.88,
    1.55,
    2.57,
    8.08,
    2.19,
    3.34,
    6.66,
    3.7,
    1.75,
    3.13,
    2.15,
    5.79,
    10.8,
    1.63,
    1.88,
    8,
    1.06,
    1,
    4.02,
    3.77,
    1.55,
    1.53,
    3.25,
    1.17,
    1.28,
    183.67,
    2.28,
    4.43,
    1.29,
    1.18,
    1.03,
    1.63,
    6.69,
    1.16,
    1,
    1.01,
    4.31,
    11.61,
    8.22,
    1.15,
    5.6,
    2.02,
    1.37,
    11.04
]

let testResult = {
	'betPrice':10,
	'balance':0,
	'testGameCount':0,
	'testGamewinn':0,
	'testGamefaild':0
}

let globalList = []

let patternRange = 4 //defualt pattern range 

function roundFractionNumber(n){

    let string_n = n.toString()
    let string_split_by_dote = string_n.split('.')
        string_split_by_dote = string_split_by_dote[1]
    //console.log(`string_split_by_dote ${string_split_by_dote}`)

     if(string_split_by_dote == undefined)
        return n 
    
    
    let fraction1 = string_split_by_dote.length > 0 ? string_split_by_dote : '0'
        
    return  parseFloat(parseInt(n) + '.' +fraction1 + '0')
}

function winnpattern(){
	let count = 0
	let pattern = []
	
	for(let x=0; x<globalList.length; x++){
		if(globalList[x] > 1.99){
			count += 1
		}else{
			if(count > 0){
				pattern.push(count)
			}
			count = 0
		}
	}
	
	return pattern
}

function faildpattern(){
	let count = 0
	let pattern = []
	
	for(let x=0; x<globalList.length; x++){
		if(globalList[x] < 2){
			count += 1
		}else{
			if(count > 0){
				pattern.push(count)
			}
			count = 0
		}
	}
	
	return pattern
}

function manageBlance(gameResultOdd){
	testResult.testGameCount += 1
	
	if(gameResultOdd < 2){
		testResult.testGamefaild += 1
		testResult.balance -= testResult.betPrice
	}else if(gameResultOdd > 1.99){
		testResult.testGamewinn += 1
		testResult.balance += testResult.betPrice
	}
}

for(let x=data.length-1; x>=0; x--){
	
	//update global list 
	if(globalList.length < 1)
		globalList.push(data[x])
	else{
		let newList = []
		newList.push(data[x]) //add the current result to new list
		newList.push(...globalList) //add global list to new list
		globalList = newList //swap to globalList
	}
	

	
	let winnp 	= winnpattern()
	let faildp  = faildpattern()
	
	if(winnp.length > patternRange  & faildp.length > patternRange){
	
		last13resultWinn = winnp.slice(0, patternRange)
		last13resultFaild = faildp.slice(0, patternRange)
		
		
		//console.log(`last13resultWinn : ${last13resultWinn}`)
		console.log(patternRange, patternRange*2)
		
		if(faildp.slice(0,patternRange).reverse().toString() == faildp.slice(patternRange, patternRange*2).toString()){
			manageBlance(data[x-1])
			
			console.log(`Test Game    : faildp = ${faildp.slice(0,patternRange).reverse().toString()} == ${faildp.slice(patternRange, patternRange*2).toString()}`)
			console.log(`Result Go To : ${data[x-1]}`)
		}
	
	}
	
}

console.log(`Final Result : `, testResult )
